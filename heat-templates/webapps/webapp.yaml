heat_template_version: 2015-10-15

description: |
  Test server with WebApp on it.
  Actual webapp is defined in environment as Test::Web::App resource.

parameters:
  key:
    type: string
  flavor:
   type: string
  image:
    type: string
  app_port:
    type: number
    default: 80
  net:
    type: string
    default: private
  subnet:
    type: string
    default: private-subnet

resources:

  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_max: { get_param: app_port }
          port_range_min: { get_param: app_port }
          remote_ip_prefix: '0.0.0.0/0'
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_max: 22
          port_range_min: 22
          remote_ip_prefix: '0.0.0.0/0'

  port:
    type: OS::Neutron::Port
    properties:
      replacement_policy: AUTO
      network: { get_param: net }
      fixed_ips:
        - subnet: {get_param: subnet }
      security_groups:
        - { get_resource: secgroup }

  config:
    type: Test::Web::App
    properties:
      curl_cli: { get_attr: [handle, curl_cli] }
      port: { get_param: app_port }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data: { get_resource: config }

  handle:
    type: OS::Heat::WaitConditionHandle

  waiter:
    type: OS::Heat::WaitCondition
    depends_on: server
    properties:
      count: 1
      timeout: 600
      handle: { get_resource: handle }

outputs:
  networks:
    description: URL of the webapp
    value: { get_attr: [server, networks]}
  webapp:
    description: URL of the webapp
    value:
      str_replace:
        template: http://SERVER_IP:PORT
        params:
          SERVER_IP: { get_attr: [ server, networks, {get_param: net}, 0 ] }
          PORT: { get_param: app_port }
