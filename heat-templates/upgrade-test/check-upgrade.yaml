heat_template_version: 2015-10-15

description: Test to check resources interface stability

parameters:
  key_name:
    type: string
    description: SSH key to inject into instances
    default: demo
  image:
    type: string
    description: Image to boot instances from
    default: fedora-heat-test-image
  flavor:
    type: string
    description: Flavor of the created images
    default: m1.heat
  external_network:
    type: string
    description: Network of floating IPs
    default: 78cded33-d1cf-49a4-8e86-916a6b3c7307
 
resources:

  WaitHandle: 
    type: AWS::CloudFormation::WaitConditionHandle
  
  WaitCondition:
    type: AWS::CloudFormation::WaitCondition
    depends_on: Server
    properties:
      Handle: { get_resource: WaitHandle }
      Count: 1
      Timeout: 600

  Server:
    type: OS::Nova::Server
    properties:
      availability_zone: nova
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: Port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            /opt/aws/bin/cfn-signal -e 0 'signalhandle'
          params:
            signalhandle: { get_resource: WaitHandle }

  Volume:
    type: OS::Cinder::Volume
    properties:
      size: 1
      availability_zone: nova
  
  # Disabled until bug #1341739 is fixed in master Cinder
  #VolumeAttachment:
    #type: OS::Cinder::VolumeAttachment
    #properties:
      #instance_uuid: { get_resource: Server }
      #volume_id: { get_resource: Volume }

  Router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network }
  
  Net:
    type: OS::Neutron::Net
    properties:
      name: 'Demo-Net'

  Subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: Net }
      ip_version: 4
      cidr: '10.0.1.0/24'
      dns_nameservers:
        - '8.8.8.8'

  RouterInterface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: Router }
      subnet_id: { get_resource: Subnet }

  Port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: Net }
      fixed_ips:
        - subnet_id: { get_resource: Subnet }
      security_groups:
        - { get_resource: SecGroup }

  SecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Heat Demo
      name: Demo
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          remote_ip_prefix: '0.0.0.0/0'

  FloatingIP:
    type: OS::Neutron::FloatingIP
    depends_on: RouterInterface
    properties:
      floating_network_id: { get_param: external_network }

  FloatingIPassoc:
    type: OS::Neutron::FloatingIPAssociation
    properties: 
      floatingip_id: { get_resource: FloatingIP }
      port_id: { get_resource: Port }
