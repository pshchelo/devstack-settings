heat_template_version: ocata
description: >
  A simple Heat template that creates an instance with a network and a subnet,
  and verifies that instance can ping back to Heat API via WaitCondition.
parameters:
  image:
    type: string
    default: cirros-0.3.5-x86_64-disk
    description: Glance image name or UUID
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    default: m1.nano
    description: Nova flavor name or ID
    constraints:
      - custom_constraint: nova.flavor
  extnet:
    type: string
    default: public
    description: >
      Name or ID of the public network in Neutron.
      Needed for instances to have access to public cloud API
      when Neutron backend is OVS.
    constraints:
      - custom_constraint: neutron.network
  dns_servers:
    type: comma_delimited_list
    default: "1.1.1.1"
    #default: 172.18.224.6
    description: >
      List of DNS servers to set for instance.
      May be needed when public API iof the cloud is using
      DNS names that are resolved only internally.
  curl_timeout:
    type: number
    description: Seconds to wait before POSTing to Heat's WaitConditionHandle
    default: 0

resources:
  network:
    type: OS::Neutron::Net
  subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: network }
      cidr: 10.0.0.0/24
      dns_nameservers: { get_param: dns_servers }
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: extnet }
  router_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }
  handle:
    type: OS::Heat::WaitConditionHandle
    depends_on: router_iface
  waiter:
    type: OS::Heat::WaitCondition
    depends_on: server
    properties:
      timeout: 600
      handle: { get_resource: handle }
  server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - subnet: { get_resource: subnet }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh -x
            sleep CURL_TIMEOUT
            WC_NOTIFY -k -d '{"status": "SUCCESS", "reason": "ready!", "data": "done", "id": "server1"}'
          params:
            WC_NOTIFY: { get_attr: [ handle, curl_cli ] }
            CURL_TIMEOUT: { get_param: curl_timeout }

outputs:
  networks:
    value: { get_attr: [server, networks ] }
  addresses:
    value: { get_attr: [server, addresses ] }
  ip:
    value: { get_attr: [server, networks, {get_resource: network }, 0 ] }
  signal:
    value: { get_attr: [ handle, curl_cli ] }
